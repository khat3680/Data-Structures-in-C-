------------------------------
Start: Testing remove_shortest:

Printing Processes Before Any Remove:
[5](111111,20)
[7](222222,10)
[7](333333,60)
[8](444444,20)
[9](555555,30)
[9](666666,30)

Case 0: NULL pointer:
Error(remove_shortest): given pointer is NULL

Case 1: Invalid Size:
Error(remove_shortest): invalid array size

Case 2: First Remove (Simple):
Shortest Process is : 222222
[5](111111,20)
[9](666666,30)
[7](333333,60)
[8](444444,20)
[9](555555,30)

Case 3: Second Remove (First Element):
Shortest Process is : 111111
[9](555555,30)
[9](666666,30)
[7](333333,60)
[8](444444,20)

Case 4: Third Remove (Last Element):
Shortest Process is : 444444
[9](555555,30)
[9](666666,30)
[7](333333,60)

Case 5: Fourth Remove (Same arrival and time):
Shortest Process is : 555555
[7](333333,60)
[9](666666,30)

Case 6: Fifth Remove:
Shortest Process is : 666666
[7](333333,60)

Case 7: Last Remove:
Shortest Process is : 333333
[0](0,0)

------------------------------
End of Testing remove_shortest

------------------------------
Start: Testing reverse_stack:

Reversing an empty Stack:
Stack before reverse:
Stack Size = 0
<emtpy_stack>
Stack after reverse:
Stack Size = 0
<emtpy_stack>

Reversing a stack of 10 random processes:
Printing Stack before reverse:
Stack Size = 10
[10](1000010009,19)
[9](1000010008,18)
[8](1000010007,17)
[7](1000010006,16)
[6](1000010005,15)
[5](1000010004,14)
[4](1000010003,13)
[3](1000010002,12)
[2](1000010001,11)
[1](1000010000,10)
Stack after reverse:
Stack Size = 10
[1](1000010000,10)
[2](1000010001,11)
[3](1000010002,12)
[4](1000010003,13)
[5](1000010004,14)
[6](1000010005,15)
[7](1000010006,16)
[8](1000010007,17)
[9](1000010008,18)
[10](1000010009,19)

------------------------------
End of Testing reverse_stack

------------------------------
Start: Testing contains_stack:

Contents of s = 
Stack Size = 11
[5](1000020004,14)
[10](1000020009,19)
[9](1000020008,18)
[8](1000020007,17)
[7](1000020006,16)
[6](1000020005,15)
[5](1000020004,14)
[4](1000020003,13)
[3](1000020002,12)
[2](1000020001,11)
[1](1000020000,10)

Contains [2](1000020001,11)? = 1
Contains [7](1000020006,16)? = 1
Contains [300](1000020005,15)? = 0
Contains [4](1000020003,57)? = 0

Empty Stack:
Error(contains_stack): invalid stack

Invalid data:
Error(contains_stack): invalid data

------------------------------
End of Testing contains_stack

------------------------------
Start: Testing resize_stack:

Creating a stack with 10 elements
Capacity = 10, Stack Size = 10
[10](1000010009,19)
[9](1000010008,18)
[8](1000010007,17)
[7](1000010006,16)
[6](1000010005,15)
[5](1000010004,14)
[4](1000010003,13)
[3](1000010002,12)
[2](1000010001,11)
[1](1000010000,10)

Resize to 5:
Capacity = 5, Stack Size = 5
[5](1000010004,14)
[4](1000010003,13)
[3](1000010002,12)
[2](1000010001,11)
[1](1000010000,10)

Resize to 9:
Capacity = 9, Stack Size = 5
[5](1000010004,14)
[4](1000010003,13)
[3](1000010002,12)
[2](1000010001,11)
[1](1000010000,10)

Resize to 6:
Capacity = 6, Stack Size = 5
[5](1000010004,14)
[4](1000010003,13)
[3](1000010002,12)
[2](1000010001,11)
[1](1000010000,10)

Resize to 3:
Capacity = 3, Stack Size = 3
[3](1000010002,12)
[2](1000010001,11)
[1](1000010000,10)

Resize to 0:
Error(resize_stack): invalid capacity size.
Capacity = 3, Stack Size = 3
[3](1000010002,12)
[2](1000010001,11)
[1](1000010000,10)

Destroy stack
------------------------------
End of Testing resize_stack

------------------------------
Start: Testing concat_stack:

Case 0: Two Empty Stacks:
Stacks Before Concatenation:
Stack 1: Capacity = 3, Stack Size = 0
<emtpy_stack>
Stack 2: Capacity = 2, Stack Size = 0
<emtpy_stack>

Stacks After Concatenation:
Stack 3: Capacity = 5, Stack Size = 0
<emtpy_stack>
Stack 1: Capacity = 3, Stack Size = 0
<emtpy_stack>
Stack 2: Capacity = 2, Stack Size = 0
<emtpy_stack>


Case 1: Non-empty to empty stack:
Stacks Before Concatenation:
Stack 1: Capacity = 3, Stack Size = 0
<emtpy_stack>
Stack 2: Capacity = 2, Stack Size = 2
[2](1000010001,11)
[1](1000010000,10)

Stacks After Concatenation:
Stack 4: Capacity = 5, Stack Size = 2
[2](1000010001,11)
[1](1000010000,10)
Stack 1: Capacity = 3, Stack Size = 0
<emtpy_stack>
Stack 2: Capacity = 2, Stack Size = 2
[2](1000010001,11)
[1](1000010000,10)


Case 2: Two non-empty stacks:
Stacks Before Concatenation:
Stack 1: Capacity = 3, Stack Size = 3
[5](1000010004,14)
[4](1000010003,13)
[3](1000010002,12)
Stack 2: Capacity = 2, Stack Size = 2
[2](1000010001,11)
[1](1000010000,10)

Stacks After Concatenation:
Stack 5: Capacity = 5, Stack Size = 5
[2](1000010001,11)
[1](1000010000,10)
[5](1000010004,14)
[4](1000010003,13)
[3](1000010002,12)
Stack 1: Capacity = 3, Stack Size = 3
[5](1000010004,14)
[4](1000010003,13)
[3](1000010002,12)
Stack 2: Capacity = 2, Stack Size = 2
[2](1000010001,11)
[1](1000010000,10)


Destroy stack 1
Destroy stack 2
Destroy stack 3
Destroy stack 4
Destroy stack 5

------------------------------
End of Testing concat_stack

